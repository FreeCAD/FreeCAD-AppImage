env:
  global:
    # tag
    #
    - FREECAD_RELEASE="0.18"
    - OSX_PORTS_CACHE=${OSX_PORTS_CACHE:-FreeCAD/FreeCAD-ports-cache}
    - DEPLOY_REPO=${DEPLOY_REPO:-FreeCAD/FreeCAD}
    - DEPLOY=${DEPLOY:-0}

os:
  - linux
  - osx

compiler: gcc
language: cpp

before_install:
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      sudo apt-get update -qq && sudo apt-get install -y desktop-file-utils jq zsync p7zip-full;
      apt-get download libc6;
      dpkg -x libc6*.deb libc6;
      fi
    # https://travis-ci.community/t/syntax-error-unexpected-keyword-rescue-expecting-keyword-end-in-homebrew/5623
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      brew update;
      brew install jq p7zip;
      fi

install:
  - eval "$(curl -fsSL "https://raw.githubusercontent.com/${OSX_PORTS_CACHE}/v${FREECAD_RELEASE}/travis-helpers.sh")"
  - # Temp patch
  - |
    gitHub_release_named()
    {
       namedReleaseAsJSON=$(gitHub_releases ${1} | jq -r --arg releaseName ${2-$release} '.[] | select(.tag_name==$releaseName)')
       echo ${namedReleaseAsJSON}
    }
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      curl -LO https://raw.githubusercontent.com/AppImage/AppImages/master/pkg2appimage;
      wget "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage";
      chmod a+x appimagetool-x86_64.AppImage;
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
      bash miniconda.sh -b -p $HOME/miniconda;
      . $HOME/miniconda/etc/profile.d/conda.sh;
      fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh;
      bash miniconda.sh -b -p $HOME/miniconda;
      . $HOME/miniconda/etc/profile.d/conda.sh;
      fi

  - wget "https://github.com/FreeCAD/FreeCAD/releases/download/0.18/FreeCAD.0_18.Offline.Doc.7z"
  - 7z x FreeCAD.0_18.Offline.Doc.7z

script:
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      cd conda/linux;
      bash ./create_bundle.sh;
      cd ..;
      fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      cd conda/osx;
      bash ./create_bundle.sh;
      cd ..;
      fi

after_success:
  - # Deploy stable builds to latest
  - # Use an authentication token to avoid rate limit
  - DEPLOY_RELEASE_STABLE="$(curl -s -H "Authorization:token ${GH_TOKEN}" "https://api.github.com/repos/FreeCAD/FreeCAD/releases/latest" | jq -r .tag_name)"
  - # Uncomment to manually set the tag name
  - # DEPLOY_RELEASE_STABLE="0.18.3"
  - echo "$DEPLOY_RELEASE_STABLE"
  - |
    if [ "$TRAVIS_OS_NAME" == "linux" -a "${DEPLOY}" == "1" ]; then
      export deployContext=$(create_helper_context repo=${DEPLOY_REPO} auth_token=${GH_TOKEN} release=${DEPLOY_RELEASE_STABLE})
      gitHub_prune_assets_for_release_named $deployContext ".AppImage" 0
      export DEPLOYMENT_ARCHIVE=$(ls linux/*.AppImage)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
      export DEPLOYMENT_ARCHIVE=$(ls linux/*.AppImage.zsync)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
      export DEPLOYMENT_ARCHIVE=$(ls linux/*.AppImage-SHA256.txt)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
    fi
  - |
    if [ "$TRAVIS_OS_NAME" == "osx" -a "${DEPLOY}" == "1" ]; then
      export deployContext=$(create_helper_context repo=${DEPLOY_REPO} auth_token=${GH_TOKEN} release=${DEPLOY_RELEASE_STABLE})
      gitHub_prune_assets_for_release_named $deployContext ".dmg" 0
      export DEPLOYMENT_ARCHIVE=$(ls osx/*.dmg)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
      export DEPLOYMENT_ARCHIVE=$(ls osx/*.dmg-SHA256.txt)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
    fi
